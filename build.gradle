plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version/* + "+" + project.minecraft_version + "+FABRIC"*/
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://maven.wispforest.io' }
	maven {
		name = "Ladysnake Mods"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven { url 'https://jitpack.io'
		metadataSources {
			artifact() //Look directly for artifact
		}}
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/"}
	maven {url "https://cursemaven.com"
		content {includeGroup "curse.maven"}
		metadataSources {
			artifact() //Look directly for artifact
		}
	}
	maven {
		name = "Modrinth"
		url "https://api.modrinth.com/maven"
	}
}

loom {
    runs {
		// This adds a new gradle task that runs the datagen API
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=ait"
 
			runDir "build/datagen"
		}
	}
}

// Add the generated resources to the main source set
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "io.wispforest:owo-lib:${project.owo_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-level:${project.cardinal_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-item:${project.cardinal_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-block:${project.cardinal_version}"
	modImplementation "com.github.Neptune-Development-Group:neptunelib:${project.neptunelib_version}" // NeptuneLib is made by Creativious DM him on discord if you have a problem

	annotationProcessor "io.wispforest:owo-lib:${project.owo_version}"
	include "com.github.Neptune-Development-Group:neptunelib:${project.neptunelib_version}" // NeptuneLib is made by Creativious DM him on discord if you have a problem
	// We need it mate silly billy
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-level:${project.cardinal_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-item:${project.cardinal_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-block:${project.cardinal_version}"

	include "io.wispforest:owo-sentinel:${project.owo_version}"

	// change to modImplementation to play with ip, modCompileOnlyApi to not play with ip
	/*modCompileOnlyApi*/modCompileOnlyApi("com.github.iPortalTeam.ImmersivePortalsMod:imm_ptl_core:${project.ip_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	/*modCompileOnlyApi*/modCompileOnlyApi("com.github.iPortalTeam.ImmersivePortalsMod:q_misc_util:${project.ip_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	/*modCompileOnlyApi*/modCompileOnlyApi("me.shedaniel.cloth:cloth-config-fabric:11.0.99") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modCompileOnlyApi("curse.maven:forge-config-api-port-fabric-547434:4583000")

	/*modImplementation*/modCompileOnlyApi("maven.modrinth:regeneration:42.0.0+fabric")

	modCompileOnlyApi("maven.modrinth:k9-mod:${project.k9_version}")}

processResources {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Exclude duplicate files, I don't why this even works
	inputs.property "version", project.version
	inputs.property "minecraft_version", project.minecraft_version
	inputs.property "loader_version", project.loader_version
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
				"minecraft_version": project.minecraft_version,
				"loader_version": project.loader_version
	}
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with sound characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
		it.options.release = targetJavaVersion
	}
}

java {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	archivesBaseName = project.base.archivesName.get()
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	//withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
